{"version":3,"sources":["api/api.js","components/PostsList/PostsList.jsx","components/NewCommentForm/NewCommentForm.jsx","components/PostDetails/PostDetails.jsx","App.jsx","index.js"],"names":["BASE_URL","getData","url","fetch","then","response","ok","Error","status","statusText","json","PostsList","userId","selectedPostId","changeSelectedPostId","useState","posts","setPosts","useEffect","allPosts","data","filter","post","getUserPosts","userPosts","className","map","key","id","title","type","onClick","Fragment","NewCommentForm","postId","comments","addComment","name","email","body","postProperties","setPostProperties","inputHandler","event","target","value","prevPostState","onSubmit","preventDefault","comment","createdComment","length","Math","max","createdAt","String","Date","updatedAt","method","headers","JSON","stringify","placeholder","onChange","PostDetails","setPost","setComments","areCommentsVisible","changeCommentsVisibility","getPostDetails","receivedPost","getPostComments","receivedComments","commentDeleteHandler","commentId","deleteComment","prevComments","prevValue","App","selectedUser","setSelectedUser","selectUserValue","setSelectUserValue","setSelectedPostId","Number","Boolean","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.147351a7.chunk.js","sourcesContent":["export const BASE_URL = 'https://mate-api.herokuapp.com';\n\nfunction getData(url) {\n  return fetch(`${BASE_URL}/${url}`)\n    .then((response) => {\n      if (!response.ok) {\n        throw new Error(`${response.status} - ${response.statusText}`);\n      }\n\n      return response.json();\n    });\n}\n\nexport function getUserPosts(userId) {\n  const allPosts = getData('posts');\n\n  return userId\n    ? allPosts.then(\n      posts => posts.data.filter(post => post.userId === userId),\n    )\n    : allPosts.then(posts => posts.data);\n}\n\nexport function getPostDetails(postId) {\n  return getData(`posts/${postId}`).then(posts => posts.data);\n}\n\nexport function getPostComments(postId) {\n  return getData('comments').then(\n    comments => comments.data.filter(comment => comment.postId === postId),\n  );\n}\n\nexport function deleteComment(commentId) {\n  fetch(`${BASE_URL}/comments/${commentId}`, { method: 'DELETE' })\n    .then((response) => {\n      if (!response.ok) {\n        throw new Error(`${response.status} - ${response.statusText}`);\n      }\n    });\n}\n\nexport function uploadComment(comment) {\n  fetch(`${BASE_URL}/comments`, {\n    method: 'POST',\n    headers: {\n      'Content-type': 'application/json; charset=utf-8',\n    },\n    body: JSON.stringify({\n      postId: comment.postId,\n      name: comment.name,\n      email: comment.email,\n      body: comment.body,\n    }),\n  }).then((response) => {\n    if (!response.ok) {\n      throw new Error(`${response.status} - ${response.statusText}`);\n    }\n  });\n}\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { getUserPosts } from '../../api/api';\nimport './PostsList.scss';\n\nexport const PostsList = ({\n  userId,\n  selectedPostId,\n  changeSelectedPostId,\n}) => {\n  const [posts, setPosts] = useState(null);\n\n  useEffect(() => {\n    getUserPosts(userId).then(userPosts => setPosts(userPosts));\n  }, [userId]);\n\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n\n      {posts ? (\n        <ul className=\"PostsList__list\">\n          {posts && posts.map(post => (\n            <li key={post.id} className=\"PostsList__item\">\n              <div>\n                <b>{`[User #${post.userId}]`}</b>\n                <br />\n                {post.title}\n              </div>\n\n              {selectedPostId === post.id\n                ? (\n                  <button\n                    type=\"button\"\n                    className=\"PostsList__button button\"\n                    onClick={() => changeSelectedPostId(0)}\n                  >\n                    Close\n                  </button>\n                )\n                : (\n                  <button\n                    type=\"button\"\n                    className=\"PostsList__button button\"\n                    onClick={() => changeSelectedPostId(post.id)}\n                  >\n                    Open\n                  </button>\n                )\n              }\n\n            </li>\n          ))}\n        </ul>\n      ) : (\n        <React.Fragment>\n          Loading...\n        </React.Fragment>\n      )}\n\n    </div>\n  );\n};\n\nPostsList.propTypes = {\n  userId: PropTypes.number.isRequired,\n  selectedPostId: PropTypes.number.isRequired,\n  changeSelectedPostId: PropTypes.func.isRequired,\n};\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { uploadComment } from '../../api/api';\nimport './NewCommentForm.scss';\n\nexport const NewCommentForm = ({ postId, comments, addComment }) => {\n  const [postProperties, setPostProperties] = useState({\n    name: '',\n    email: '',\n    body: '',\n  });\n\n  const clearForm = () => {\n    setPostProperties({\n      name: '',\n      email: '',\n      body: '',\n    });\n  };\n\n  const inputHandler = (event) => {\n    const { name, value } = event.target;\n\n    setPostProperties(prevPostState => ({\n      ...prevPostState,\n      [name]: value,\n    }));\n  };\n\n  const formSubmitHadler = (event) => {\n    event.preventDefault();\n\n    const createdComment = {\n      id: (comments.length > 0\n        ? Math.max(...comments.map(comment => comment.id)) + 1\n        : 1\n      ),\n      postId,\n      name: postProperties.name,\n      email: postProperties.email,\n      body: postProperties.body,\n      createdAt: String(new Date()),\n      updatedAt: String(new Date()),\n    };\n\n    addComment(createdComment);\n    uploadComment(createdComment);\n    clearForm();\n  };\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      onSubmit={formSubmitHadler}\n    >\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          value={postProperties.name}\n          onChange={inputHandler}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          value={postProperties.email}\n          onChange={inputHandler}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          value={postProperties.body}\n          onChange={inputHandler}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n\nNewCommentForm.propTypes = {\n  postId: PropTypes.number.isRequired,\n  comments: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    postId: PropTypes.number.isRequired,\n    name: PropTypes.string.isRequired,\n    email: PropTypes.string.isRequired,\n    body: PropTypes.string.isRequired,\n    createdAt: PropTypes.string.isRequired,\n    updatedAt: PropTypes.string.isRequired,\n  })).isRequired,\n  addComment: PropTypes.func.isRequired,\n};\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { getPostDetails, getPostComments, deleteComment } from '../../api/api';\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\n\nexport const PostDetails = ({ postId }) => {\n  const [post, setPost] = useState(null);\n  const [comments, setComments] = useState(null);\n  const [areCommentsVisible, changeCommentsVisibility] = useState(true);\n\n  useEffect(() => {\n    getPostDetails(postId).then(receivedPost => setPost(receivedPost));\n    getPostComments(postId).then(\n      receivedComments => setComments(receivedComments),\n    );\n  }, [postId]);\n\n  const commentVisibilityHandler = () => {\n    changeCommentsVisibility(prevValue => !prevValue);\n  };\n\n  const commentDeleteHandler = (commentId) => {\n    deleteComment(commentId);\n\n    setComments(prevComments => prevComments.filter(\n      comment => comment.id !== commentId,\n    ));\n  };\n\n  const addComment = (comment) => {\n    setComments(prevComments => [...prevComments, comment]);\n  };\n\n  return (\n    <>\n      {post && comments ? (\n        <div className=\"PostDetails\">\n          <h2>Post details:</h2>\n\n          <section className=\"PostDetails__post\">\n            <p>{post.title}</p>\n          </section>\n\n          <section className=\"PostDetails__comments\">\n            {comments.length > 0 && (\n              <button\n                type=\"button\"\n                className=\"button\"\n                onClick={commentVisibilityHandler}\n              >\n                {areCommentsVisible\n                  ? `Hide ${comments.length} comments`\n                  : `Show ${comments.length} comments`\n                }\n              </button>\n            )}\n\n            <ul className=\"PostDetails__list\">\n\n              {areCommentsVisible && comments.map(comment => (\n                <li\n                  className=\"PostDetails__list-item\"\n                  key={comment.id}\n                >\n                  <button\n                    type=\"button\"\n                    className=\"PostDetails__remove-button button\"\n                    onClick={() => commentDeleteHandler(comment.id)}\n                  >\n                    X\n                  </button>\n                  <p>{comment.body}</p>\n                </li>\n              ))}\n\n            </ul>\n          </section>\n\n          <section>\n            <div className=\"PostDetails__form-wrapper\">\n              <NewCommentForm\n                postId={postId}\n                comments={comments}\n                addComment={addComment}\n              />\n            </div>\n          </section>\n        </div>\n      ) : (\n        <>\n          Loading...\n        </>\n      )}\n    </>\n  );\n};\n\nPostDetails.propTypes = {\n  postId: PropTypes.number.isRequired,\n};\n","import React, { useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\n\nconst App = () => {\n  const [selectedUser, setSelectedUser] = useState(0);\n  const [selectUserValue, setSelectUserValue] = useState(0);\n  const [selectedPostId, setSelectedPostId] = useState(0);\n\n  const selectHandler = (event) => {\n    setSelectUserValue(event.target.value);\n    setSelectedUser(Number(event.target.value));\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n\n          <select\n            className=\"App__user-selector\"\n            value={selectUserValue}\n            onChange={selectHandler}\n          >\n            <option value=\"0\">All users</option>\n            <option value=\"1\">Leanne Graham</option>\n            <option value=\"2\">Ervin Howell</option>\n            <option value=\"3\">Clementine Bauch</option>\n            <option value=\"4\">Patricia Lebsack</option>\n            <option value=\"5\">Chelsey Dietrich</option>\n            <option value=\"6\">Mrs. Dennis Schulist</option>\n            <option value=\"7\">Kurtis Weissnat</option>\n            <option value=\"8\">Nicholas Runolfsdottir V</option>\n            <option value=\"9\">Glenna Reichert</option>\n            <option value=\"10\">Leanne Graham</option>\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            userId={selectedUser}\n            selectedPostId={selectedPostId}\n            changeSelectedPostId={setSelectedPostId}\n          />\n        </div>\n\n        {Boolean(selectedPostId) && (\n          <div className=\"App__content\">\n            <PostDetails\n              postId={selectedPostId}\n            />\n          </div>\n        )}\n\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}